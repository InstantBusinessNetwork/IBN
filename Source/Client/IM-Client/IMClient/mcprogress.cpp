// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "mcprogress.h"

/////////////////////////////////////////////////////////////////////////////
// CMcProgress

IMPLEMENT_DYNCREATE(CMcProgress, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMcProgress properties

long CMcProgress::GetPos()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetPos(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CMcProgress::GetStep()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetStep(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CMcProgress::GetSmooth()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CMcProgress::SetSmooth(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CMcProgress::GetVertical()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CMcProgress::SetVertical(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

long CMcProgress::GetBorder()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetBorder(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CMcProgress::GetBgColor()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetBgColor(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CMcProgress::GetFgColorLight()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetFgColorLight(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CMcProgress::GetFgColorDark()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CMcProgress::SetFgColorDark(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CMcProgress operations

long CMcProgress::StepIt()
{
	long result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CMcProgress::SetBitmaps(long hBitmapEmpty, long hBitmapFull, long left, long top, long width, long height)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hBitmapEmpty, hBitmapFull, left, top, width, height);
	return result;
}

long CMcProgress::SetRange(long nLower, long nUpper)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nLower, nUpper);
	return result;
}

long CMcProgress::GetRange(long* pnLower, long* pnUpper)
{
	long result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pnLower, pnUpper);
	return result;
}

long CMcProgress::LoadBitmapsFromStream(LPUNKNOWN pUnkStreamEmpty, LPUNKNOWN pUnkStreamFull, long left, long top, long width, long height)
{
	long result;
	static BYTE parms[] =
		VTS_UNKNOWN VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pUnkStreamEmpty, pUnkStreamFull, left, top, width, height);
	return result;
}
